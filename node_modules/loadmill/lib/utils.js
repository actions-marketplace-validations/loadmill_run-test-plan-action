"use strict";
exports.__esModule = true;
exports.TESTING_HOST = exports.getLogger = exports.Logger = exports.sleep = exports.readRawParams = exports.toLoadmillParams = exports.isUUID = exports.isString = exports.isEmptyObj = exports.getJSONFilesInFolderRecursively = exports.filterLabels = exports.convertArrToLabelQueryParams = exports.convertStrToArr = exports.printTestSuitesRunsReport = exports.printFlowRunsReport = exports.getObjectAsString = void 0;
var tslib_1 = require("tslib");
var fs = require("fs");
var path = require("path");
var isEmpty = require("lodash/isEmpty");
var isAString = require("lodash/isString");
var util = require("util");
var getObjectAsString = function (obj, colors) {
    // trim response body to length of 255
    if (obj.response && obj.response.text && obj.response.text.length > 1024) {
        obj.response.text = obj.response.text.substring(0, 1024) + ' [trimmed]';
    }
    return util.inspect(obj, { showHidden: false, depth: null, colors: colors, compact: false });
};
exports.getObjectAsString = getObjectAsString;
var coloredFlowLine = function (status, colors) {
    if (!colors) {
        return status;
    }
    return "" + getStatusColor(status) + status + CLI_COLORS.DEFAULT;
};
var printFlowRunsReport = function (suiteDescription, suiteFlowRuns, logger, colors) {
    if (suiteFlowRuns) {
        logger.log("");
        logger.log("Test Suite [" + suiteDescription + "] Flow Runs report:");
        suiteFlowRuns.map(function (f) { return logger.log("Flow " + f.description + " - " + coloredFlowLine(f.status, colors)); });
    }
};
exports.printFlowRunsReport = printFlowRunsReport;
var printTestSuitesRunsReport = function (testPlanDescription, testSuitesRuns, logger, colors) {
    if (testSuitesRuns) {
        logger.log("");
        logger.log("Test Plan [" + testPlanDescription + "] Test Suites Runs report:");
        testSuitesRuns.map(function (ts) { return logger.log("Test Suite " + ts.description + " - " + coloredFlowLine(ts.status, colors)); });
    }
};
exports.printTestSuitesRunsReport = printTestSuitesRunsReport;
var convertStrToArr = function (strWithCommas) {
    return typeof strWithCommas !== "string" ? null : strWithCommas.split(",");
};
exports.convertStrToArr = convertStrToArr;
var convertArrToLabelQueryParams = function (arr) {
    return '&label=' + arr.join('&label=');
};
exports.convertArrToLabelQueryParams = convertArrToLabelQueryParams;
var filterLabels = function (labels) {
    if (!Array.isArray(labels)) {
        throw new Error("lables need be in array format i.e. ['my label', 'another label']. Got " + labels);
    }
    if (labels.every(function (l) { return l == ''; })) {
        return null;
    }
    return labels.filter(function (l) { return (typeof l === 'string' || typeof l === 'number') && l !== ''; });
};
exports.filterLabels = filterLabels;
var getJSONFilesInFolderRecursively = function (fileOrFolder, filelist) {
    if (filelist === void 0) { filelist = []; }
    var isFile = fs.statSync(fileOrFolder).isFile();
    if (isFile && endsWith(fileOrFolder, '.json')) {
        filelist.push(fileOrFolder);
    }
    else if (!isFile) {
        fs.readdirSync(fileOrFolder)
            .map(function (file) {
            return exports.getJSONFilesInFolderRecursively(path.join(fileOrFolder, file), filelist);
        });
    }
    return filelist;
};
exports.getJSONFilesInFolderRecursively = getJSONFilesInFolderRecursively;
var endsWith = function (str, suffix) { return str.indexOf(suffix, str.length - suffix.length) !== -1; };
var isEmptyObj = function (obj) { return isEmpty(obj); };
exports.isEmptyObj = isEmptyObj;
var isString = function (obj) { return isAString(obj); };
exports.isString = isString;
var isUUID = function (s) {
    return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(s);
};
exports.isUUID = isUUID;
var toLoadmillParams = function (rawParams) {
    var parameters = {};
    rawParams.forEach(function (pair) {
        if (!pair) {
            return;
        }
        var pivot = pair.indexOf('=');
        if (pivot <= 0) {
            throw new Error("Invalid parameter assignment: " + pair);
        }
        var name = pair.slice(0, pivot);
        parameters[name] = pair.slice(pivot + 1, pair.length);
    });
    return parameters;
};
exports.toLoadmillParams = toLoadmillParams;
var readRawParams = function (filePath) {
    try {
        return fs.readFileSync(filePath, 'utf-8').split(/\r?\n/);
    }
    catch (err) {
        throw new Error("Couldn't find file '" + filePath + "'. Please check file path and permissions.");
    }
};
exports.readRawParams = readRawParams;
var sleep = function (ms) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, ms); })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.sleep = sleep;
var Logger = /** @class */ (function () {
    function Logger(verbose, colors) {
        var _this = this;
        this.verb = false;
        this.colors = false;
        this.log = function (msg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return console.log.apply(console, tslib_1.__spreadArray([msg], args));
        };
        this.error = function (err) {
            if (_this.colors) {
                console.log(CLI_COLORS.RED, err, CLI_COLORS.DEFAULT);
            }
            else {
                console.log(err);
            }
        };
        this.warn = function (wrn) {
            if (_this.colors) {
                console.log(CLI_COLORS.YELLOW, wrn, CLI_COLORS.DEFAULT);
            }
            else {
                console.log(wrn);
            }
        };
        this.verbose = function (msg) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return _this.verb ? console.log.apply(console, tslib_1.__spreadArray([msg], args)) : void (0);
        };
        this.verb = verbose;
        this.colors = colors;
    }
    return Logger;
}());
exports.Logger = Logger;
var getLogger = function (testArgs) {
    var verbose = testArgs && testArgs.verbose ? testArgs.verbose : false;
    var colors = testArgs && testArgs.colors ? testArgs.colors : false;
    return new Logger(verbose, colors);
};
exports.getLogger = getLogger;
var getStatusColor = function (status) {
    switch (status) {
        case "PASSED":
            return CLI_COLORS.GREEN;
        case "FAILED":
            return CLI_COLORS.RED;
        case "STOPPED":
            return CLI_COLORS.GREY;
        case "FLAKY":
            return CLI_COLORS.YELLOW;
        default:
            return CLI_COLORS.DEFAULT;
    }
};
var CLI_COLORS = {
    RED: '\x1b[31m',
    GREEN: '\x1b[32m',
    YELLOW: '\x1b[33m',
    GREY: '\x1b[90m',
    DEFAULT: '\x1b[0m'
};
exports.TESTING_HOST = process.env.LOADMILL_SERVER_HOST || "app.loadmill.com";
